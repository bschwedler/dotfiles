[core]
    excludesfile = ~/.gitignore
    editor = vim

[diff]
    tool = vimdiff

[alias]
    # Some borrowed, modified, or otherwise stolen from the following
    # https://github.com/jessfraz/dotfiles/blob/master/.gitconfig
    # https://github.com/mathiasbynens/dotfiles/blob/master/.gitconfig
    # https://www.youtube.com/watch?v=ZDR433b0HJY
    # https://gist.github.com/robmiller/6018582

    # SVN-like aliases
    st = status
    ci = commit
    br = branch
    co = checkout

    # Checkout a new branch
    cob = checkout -b

    alias=!git config -l | grep ^alias | cut -c 7- | sort

    # Get the current branch name (not so useful in itself, but used in
    # other aliases)
    branch-name = "!git rev-parse --abbrev-ref HEAD"
    # Push the current branch to the remote "origin", and set it to track
    # the upstream branch
    publish = "!git push -u origin $(git branch-name)"
    # Delete the remote version of the current branch
    unpublish = "!git push origin :$(git branch-name)"

    up = !git pull --rebase --prune $@ && git submodule update --init --recursive
    # Always check for updates on remote when force pushing
    pushf = push --force-with-lease

    # View abbreviated SHA, description, and history graph of the latest 20 commits
    l = log --pretty=oneline -n 20 --graph --abbrev-commit
    # Stolen from Scott Chacon
    lol = log --pretty=oneline --abbrev-commit --graph --decorate
    lola = log --graph --decorate --pretty=oneline --abbrev-commit --all --date=local --color
    # View names of files changed in commits
    logn = log --name-status --color
    # View dates of the commit. with author information
    ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%an]|[%cn]" --decorate --date=short
    # view times of commit with author information
    lt = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%an]|[%cn]" --decorate --date=iso
    # Extra-colorfull decorated history of commits
    grog = log --graph --abbrev-commit --decorate --all --format=format:\"%C(yellow)%h%C(reset) - %C(bold cyan)%aD%C(dim blue) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(green)%d%C(reset)%n %C(white)%s%C(reset)\"

    # Show verbose output about tags, branches, or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v

    # List authors
    authors = shortlog -e -s -n

    # Ingnore whitespace on diff and apply
    dnw = diff --ignore-space-at-eol
    anw = !git diff -U0 --ignore-space-at-eol --no-color -- \"$@\" | git apply --cached --unidiff-zero "#"

    # I really broke it.  Take me back!!!
    fubar = reset --hard HEAD
    # Remove branches that have already been merged with master
    # a.k.a. ‘delete merged’
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d; git remote -v update -p"

[color]
    branch = auto
    diff = auto
    status = auto
[color "branch"]
    current = green reverse
    local = cyan
    remote = blue
[color "diff"]
    meta = white bold
    frag = magenta bold
    old = blue
    new = green
[color "status"]
    # added = yellow
    # changed = green
    # untracked = cyan

[credential]
    helper = cache

[include]
    # Used to override default name and email etc.
    path = ~/.gitlocal

[apply]
    # Detect whitespace errors when applying a patch
    whitespace = fix
[pull]
    rebase = true
[rebase]
    autoStash = true
[fetch]
    prune = true
[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true
[commit]
    verbose = true

